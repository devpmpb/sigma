// backend/prisma/schema.prisma - ARQUIVO COMPLETO
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMs existentes
enum TipoEndereco {
  RESIDENCIAL
  COMERCIAL
  RURAL
  CORRESPONDENCIA
}

enum TipoLogradouro {
  RUA
  AVENIDA
  TRAVESSA
  ALAMEDA
  RODOVIA
  LINHA
  ESTRADA
}

enum TipoPropriedade {
  RURAL
  LOTE_URBANO
  COMERCIAL
  INDUSTRIAL
}

enum TipoPessoa {
  FISICA
  JURIDICA
}

// NOVO ENUM ADICIONADO
enum SituacaoPropriedade {
  PROPRIA
  CONDOMINIO
  USUFRUTO
}

// ENUMs para Autenticação
enum TipoPerfil {
  ADMIN
  OBRAS
  AGRICULTURA
}

enum ModuloSistema {
  OBRAS
  AGRICULTURA
  COMUM
  ADMIN
}

enum AcaoPermissao {
  VIEW
  CREATE
  EDIT
  DELETE
}

enum TipoPrograma {
  SUBSIDIO
  MATERIAL
  SERVICO
  CREDITO
  ASSISTENCIA
}

// Modelos existentes
model Bairro {
  id          Int          @id @default(autoincrement())
  nome        String       @unique
  ativo       Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enderecos   Endereco[]
}

model AreaRural {
  id         Int        @id @default(autoincrement())
  nome       String     @unique  // Ex: "Linha São Francisco", "Estrada do Açude"
  ativo      Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  enderecos  Endereco[]
}

model Logradouro {
  id              Int           @id @default(autoincrement())
  tipo            TipoLogradouro
  descricao       String        
  cep             String?       @unique
  ativo           Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  enderecos       Endereco[]
  propriedades    Propriedade[] // NOVA RELAÇÃO
}

model GrupoProduto {
  id        Int      @id @default(autoincrement())
  descricao String   @unique
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TipoVeiculo {
  id        Int      @id @default(autoincrement())
  descricao String   @unique
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pessoa {
  id             Int           @id @default(autoincrement())
  tipoPessoa     TipoPessoa    
  nome           String        // Razão social para PJ, nome completo para PF
  cpfCnpj        String        @unique
  telefone       String?
  email          String?
  ativo          Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relacionamentos
  enderecos      Endereco[]
  propriedades   Propriedade[]
  pessoaFisica   PessoaFisica?
  pessoaJuridica PessoaJuridica?
}

model PessoaFisica {
  id             Int       @id
  pessoa         Pessoa    @relation(fields: [id], references: [id])
  rg             String?
  dataNascimento DateTime?
  // Outros campos específicos de pessoa física
  
  // Relacionamentos específicos
  produtor       Produtor?
  arrendamentos  Arrendamento[] @relation("arrendatario")
  arrendou       Arrendamento[] @relation("proprietario")
}

model PessoaJuridica {
  id                 Int      @id
  pessoa             Pessoa   @relation(fields: [id], references: [id])
  nomeFantasia       String?
  inscricaoEstadual  String?
  inscricaoMunicipal String?
  dataFundacao       DateTime?
  representanteLegal String?
  // Outros campos específicos de pessoa jurídica
}

model Endereco {
  id              Int           @id @default(autoincrement())
  pessoaId        Int
  pessoa          Pessoa        @relation(fields: [pessoaId], references: [id])
  
  // Para endereços urbanos
  logradouroId    Int?
  logradouro      Logradouro?   @relation(fields: [logradouroId], references: [id])
  numero          String?
  complemento     String?
  bairroId        Int?
  bairro          Bairro?       @relation(fields: [bairroId], references: [id])
  
  // Para endereços rurais
  areaRuralId     Int?
  areaRural       AreaRural?    @relation(fields: [areaRuralId], references: [id])
  referenciaRural String?
  
  // Campos comuns
  coordenadas     String?       // Latitude,Longitude
  tipoEndereco    TipoEndereco
  principal       Boolean       @default(false)
  
  // Relação com propriedade (se este endereço referencia uma propriedade da pessoa)
  propriedadeId   Int?  
  propriedade     Propriedade?  @relation(fields: [propriedadeId], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Produtor {
  id                  Int                   @id
  pessoa              PessoaFisica          @relation(fields: [id], references: [id])
  inscricaoEstadual   String?
  dap                 String?
  tipoProdutor        String?
  atividadePrincipal  String?
  contratoAssistencia Boolean               @default(false)
  observacoes         String?
  
  // Campos específicos do produtor rural
  areaEfetiva         AreaEfetiva?
  solicitacoes        SolicitacaoBeneficio[]
}

model AreaEfetiva {
  id                    Int       @id
  produtor              Produtor  @relation(fields: [id], references: [id])
  anoReferencia         Int
  areaPropria           Decimal   @db.Decimal(10, 2)
  areaArrendadaRecebida Decimal   @db.Decimal(10, 2)
  areaArrendadaCedida   Decimal   @db.Decimal(10, 2)
  areaEfetiva           Decimal   @db.Decimal(10, 2)
  updatedAt             DateTime  @updatedAt
}

// MODELO PROPRIEDADE ATUALIZADO
model Propriedade {
  id               Int                    @id @default(autoincrement())
  nome             String
  tipoPropriedade  TipoPropriedade       @default(RURAL)
  
  // NOVOS CAMPOS ADICIONADOS
  logradouroId     Int?                  // Referência à tabela Logradouro
  logradouro       Logradouro?           @relation(fields: [logradouroId], references: [id])
  numero           String?               // Número do lote/chácara
  
  // Área total - lógica será: rural = alqueires, outros = metros quadrados
  areaTotal        Decimal               @db.Decimal(10, 2)
  unidadeArea      String                @default("alqueires") // "alqueires" ou "metros_quadrados"
  
  // Campos específicos para propriedades RURAIS
  itr              String?               // ITR (só para rural)
  incra            String?               // INCRA (só para rural) 
  
  // NOVOS CAMPOS OBRIGATÓRIOS
  situacao         SituacaoPropriedade   // própria/condomínio/usufruto
  proprietarioResidente Boolean          @default(false) // Se o proprietário reside na propriedade
  
  // Campos existentes mantidos
  localizacao      String?               // Descrição geral (mantido para compatibilidade)
  matricula        String?
  proprietarioId   Int
  proprietario     Pessoa                @relation(fields: [proprietarioId], references: [id])
  
  // Relacionamentos
  arrendamentos    Arrendamento[]
  enderecos        Endereco[]
  
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model Arrendamento {
  id             Int         @id @default(autoincrement())
  propriedadeId  Int
  propriedade    Propriedade @relation(fields: [propriedadeId], references: [id])
  proprietarioId Int
  proprietario   PessoaFisica      @relation("proprietario", fields: [proprietarioId], references: [id])
  arrendatarioId Int
  arrendatario   PessoaFisica      @relation("arrendatario", fields: [arrendatarioId], references: [id])
  areaArrendada  Decimal     @db.Decimal(10, 2)
  dataInicio     DateTime
  dataFim        DateTime?
  status         String      @default("ativo")
  documentoUrl   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

// Modelo para solicitações de benefícios
model SolicitacaoBeneficio {
  id              Int       @id @default(autoincrement())
  produtorId      Int
  produtor        Produtor  @relation(fields: [produtorId], references: [id])
  programaId      Int
  programa        Programa  @relation(fields: [programaId], references: [id])
  datasolicitacao DateTime  @default(now())
  status          String    @default("pendente")
  observacoes     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Modelo para programas de incentivo
model Programa {
  id              Int                   @id @default(autoincrement())
  nome            String
  descricao       String?
  leiNumero       String?
  tipoPrograma    TipoPrograma          
  ativo           Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  solicitacoes    SolicitacaoBeneficio[]
  regras          RegrasNegocio[]
}

// Modelo para regras de negócio dos programas
model RegrasNegocio {
  id              Int       @id @default(autoincrement())
  programaId      Int
  programa        Programa  @relation(fields: [programaId], references: [id])
  tipoRegra       String    // 'area_efetiva', 'area_construcao', etc.
  parametro       Json      // Estrutura JSON com condições 
  valorBeneficio  Decimal   @db.Decimal(10, 2)
  limiteBeneficio Json?     // Estrutura JSON com limites
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// MODELOS DE AUTENTICAÇÃO
model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String   // Hash da senha
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  perfilId Int
  perfil   Perfil @relation(fields: [perfilId], references: [id])
  
  // Sessões ativas do usuário
  sessoes UsuarioSessao[]
  
  // Auditoria
  ultimoLogin DateTime?
  tentativasLogin Int @default(0)
  bloqueadoAte DateTime?
}

// Perfis de usuário (Admin, Obras, Agricultura, etc)
model Perfil {
  id        Int         @id @default(autoincrement())
  nome      TipoPerfil  @unique
  descricao String?
  ativo     Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relacionamentos
  usuarios   Usuario[]
  permissoes PerfilPermissao[]
}

// Permissões disponíveis no sistema
model Permissao {
  id        Int            @id @default(autoincrement())
  modulo    ModuloSistema
  acao      AcaoPermissao
  descricao String?
  ativo     Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relacionamentos
  perfis PerfilPermissao[]
  
  // Índice composto para evitar duplicatas
  @@unique([modulo, acao])
}

// Relacionamento Many-to-Many entre Perfil e Permissão
model PerfilPermissao {
  id Int @id @default(autoincrement())
  
  perfilId    Int
  permissaoId Int
  
  perfil    Perfil    @relation(fields: [perfilId], references: [id])
  permissao Permissao @relation(fields: [permissaoId], references: [id])
  
  createdAt DateTime @default(now())
  
  // Evita permissões duplicadas para o mesmo perfil
  @@unique([perfilId, permissaoId])
}

// Sessões ativas dos usuários (para controle de login)
model UsuarioSessao {
  id           Int      @id @default(autoincrement())
  usuarioId    Int
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  revokedAt    DateTime?
  
  // IP e User Agent para auditoria
  ipAddress String?
  userAgent String?
  
  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

// Log de auditoria para ações sensíveis
model AuditoriaLogin {
  id        Int      @id @default(autoincrement())
  email     String
  sucesso   Boolean
  ipAddress String?
  userAgent String?
  motivo    String?  // "senha_incorreta", "usuario_bloqueado", etc
  createdAt DateTime @default(now())
}