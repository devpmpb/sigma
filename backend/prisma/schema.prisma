generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoEndereco {
  RESIDENCIAL
  COMERCIAL
  RURAL
  CORRESPONDENCIA
}

enum TipoLogradouro {
  RUA
  AVENIDA
  TRAVESSA
  ALAMEDA
  RODOVIA
  LINHA
  ESTRADA
}

enum TipoPropriedade {
  RURAL
  LOTE_URBANO
  COMERCIAL
  INDUSTRIAL
}

enum TipoPessoa {
  FISICA
  JURIDICA
}

model Bairro {
  id          Int          @id @default(autoincrement())
  nome        String       @unique
  ativo       Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  logradouros Logradouro[]
  enderecos   Endereco[]
}

model AreaRural {
  id         Int        @id @default(autoincrement())
  nome       String     @unique  // Ex: "Linha São Francisco", "Estrada do Açude"
  ativo      Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  enderecos  Endereco[]
}

model Logradouro {
  id              Int           @id @default(autoincrement())
  tipo            TipoLogradouro
  descricao       String        
  cep             String?       @unique
  bairroId        Int?
  bairro          Bairro?       @relation(fields: [bairroId], references: [id])
  ativo           Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  enderecos       Endereco[]
}

model GrupoProduto {
  id        Int      @id @default(autoincrement())
  descricao String   @unique
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TipoVeiculo {
  id        Int      @id @default(autoincrement())
  descricao String   @unique
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pessoa {
  id             Int           @id @default(autoincrement())
  tipoPessoa     TipoPessoa    
  nome           String        // Razão social para PJ, nome completo para PF
  cpfCnpj        String        @unique
  telefone       String?
  email          String?
  status         String        @default("ativo")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relacionamentos
  enderecos      Endereco[]
  propriedades   Propriedade[]
  pessoaFisica   PessoaFisica?
  pessoaJuridica PessoaJuridica?
}

model PessoaFisica {
  id             Int       @id
  pessoa         Pessoa    @relation(fields: [id], references: [id])
  rg             String?
  dataNascimento DateTime?
  // Outros campos específicos de pessoa física
  
  // Relacionamentos específicos
  produtor       Produtor?
  arrendamentos  Arrendamento[] @relation("arrendatario")
  arrendou       Arrendamento[] @relation("proprietario")
}

model PessoaJuridica {
  id                 Int      @id
  pessoa             Pessoa   @relation(fields: [id], references: [id])
  nomeFantasia       String?
  inscricaoEstadual  String?
  inscricaoMunicipal String?
  dataFundacao       DateTime?
  representanteLegal String?
  // Outros campos específicos de pessoa jurídica
}

model Endereco {
  id              Int           @id @default(autoincrement())
  pessoaId        Int
  pessoa          Pessoa        @relation(fields: [pessoaId], references: [id])
  
  // Para endereços urbanos
  logradouroId    Int?
  logradouro      Logradouro?   @relation(fields: [logradouroId], references: [id])
  numero          String?
  complemento     String?
  bairroId        Int?
  bairro          Bairro?       @relation(fields: [bairroId], references: [id])
  
  // Para endereços rurais
  areaRuralId     Int?
  areaRural       AreaRural?    @relation(fields: [areaRuralId], references: [id])
  referenciaRural String?
  
  // Campos comuns
  coordenadas     String?       // Latitude,Longitude
  tipoEndereco    TipoEndereco
  principal       Boolean       @default(false)
  
  // Relação com propriedade (se este endereço referencia uma propriedade da pessoa)
  propriedadeId   Int?  
  propriedade     Propriedade?  @relation(fields: [propriedadeId], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Produtor {
  id                  Int                   @id
  pessoa              PessoaFisica                @relation(fields: [id], references: [id])
  inscricaoEstadual   String?
  dap                 String?
  tipoProdutor        String?
  atividadePrincipal  String?
  contratoAssistencia Boolean               @default(false)
  observacoes         String?
  
  // Campos específicos do produtor rural
  areaEfetiva         AreaEfetiva?
  solicitacoes        SolicitacaoBeneficio[]
}

model AreaEfetiva {
  id                    Int       @id
  produtor              Produtor  @relation(fields: [id], references: [id])
  anoReferencia         Int
  areaPropria           Decimal   @db.Decimal(10, 2)
  areaArrendadaRecebida Decimal   @db.Decimal(10, 2)
  areaArrendadaCedida   Decimal   @db.Decimal(10, 2)
  areaEfetiva           Decimal   @db.Decimal(10, 2)
  updatedAt             DateTime  @updatedAt
}

model Propriedade {
  id               Int              @id @default(autoincrement())
  nome             String
  tipoPropriedade  TipoPropriedade  @default(RURAL)
  areaTotal        Decimal          @db.Decimal(10, 2)
  localizacao      String?
  matricula        String?
  proprietarioId   Int
  proprietario     Pessoa           @relation(fields: [proprietarioId], references: [id])
  
  // Relacionamentos
  arrendamentos    Arrendamento[]
  enderecos        Endereco[]       // Um ou mais endereços podem estar associados a esta propriedade
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Arrendamento {
  id             Int         @id @default(autoincrement())
  propriedadeId  Int
  propriedade    Propriedade @relation(fields: [propriedadeId], references: [id])
  proprietarioId Int
  proprietario   PessoaFisica      @relation("proprietario", fields: [proprietarioId], references: [id])
  arrendatarioId Int
  arrendatario   PessoaFisica      @relation("arrendatario", fields: [arrendatarioId], references: [id])
  areaArrendada  Decimal     @db.Decimal(10, 2)
  dataInicio     DateTime
  dataFim        DateTime?
  status         String      @default("ativo")
  documentoUrl   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

// Modelo para solicitações de benefícios
model SolicitacaoBeneficio {
  id              Int       @id @default(autoincrement())
  produtorId      Int
  produtor        Produtor  @relation(fields: [produtorId], references: [id])
  programaId      Int
  programa        Programa  @relation(fields: [programaId], references: [id])
  datasolicitacao DateTime  @default(now())
  status          String    @default("pendente")
  observacoes     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Modelo para programas de incentivo
model Programa {
  id              Int                   @id @default(autoincrement())
  nome            String
  descricao       String?
  leiNumero       String?
  tipoPrograma    String                // subsídio, material, serviço
  ativo           Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  solicitacoes    SolicitacaoBeneficio[]
  regras          RegrasNegocio[]
}

// Modelo para regras de negócio dos programas
model RegrasNegocio {
  id              Int       @id @default(autoincrement())
  programaId      Int
  programa        Programa  @relation(fields: [programaId], references: [id])
  tipoRegra       String    // 'area_efetiva', 'area_construcao', etc.
  parametro       Json      // Estrutura JSON com condições 
  valorBeneficio  Decimal   @db.Decimal(10, 2)
  limiteBeneficio Json?     // Estrutura JSON com limites
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}